#!/usr/bin/python3

"""
File:           dadda.py
Author:         Marco Crisolgo,
                Renato Belmonte,
                Matteo Lago,
                Simone Ruffini

Email:          s305673@studenti.polito.it
Description:    Dadda algorithm implementation,
                portmap generator,
                bits               --> 12 bits,
                partial products   --> 6
"""

import sys
import argparse


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def FA_gen(w0, w1, w2, s, c, lev, col, printout):
    original_stdout = sys.stdout
    with open('portmap.txt', 'a') as pm:
        sys.stdout = pm
        print('FA FA' + str(lev) + '_' + str(col) + ' ' + '(' + w0.replace(" ","") + ', ' + w1.replace(" ","") + ', ' + w2.replace(" ","") + ', ' + s.replace(" ","") + ', ' + c.replace(" ","") + ')' + ';')
        sys.stdout = original_stdout
    if printout:
        print('FA FA' + str(lev) + '_' + str(col) + ' ' + '(' + bcolors.OKGREEN + w0.replace(" ","") + bcolors.ENDC + ', ' + bcolors.OKGREEN + w1.replace(" ","") + bcolors.ENDC + ', ' + bcolors.OKGREEN + w2.replace(" ","") + bcolors.ENDC + ', ' + bcolors.FAIL + s.replace(" ","") + bcolors.ENDC + ', ' + bcolors.FAIL + c.replace(" ","") + bcolors.ENDC + ')' + ';')


def HA_gen(w0, w1, s, c, lev, col, printout):
    original_stdout = sys.stdout
    with open('portmap.txt', 'a') as pm:
        sys.stdout = pm
        print('HA HA' + str(lev) + '_' + str(col) + ' ' + '(' + w0.replace(" ", "") + ', ' + w1.replace(" ","") + ', ' + s.replace(" ", "") + ', ' + c.replace(" ", "") + ')' + ';')
        sys.stdout = original_stdout
    if printout:
        print('HA HA' + str(lev) + '_' + str(col) + ' ' + '(' + bcolors.OKGREEN + w0.replace(" ","") + bcolors.ENDC + ', ' + bcolors.OKGREEN + w1.replace(" ", "") + ', ' + bcolors.FAIL + s.replace(" ", "") + bcolors.ENDC + ', ' + bcolors.FAIL + c.replace(" ","") + bcolors.ENDC + ')' + ';')


# Full Adder
def FA(A, B, c_in):
    s_out = int(((not c_in) and (not A) and B)
                or ((not c_in) and A and (not B))
                or (c_in and (not A) and (not B))
                or (c_in and A and B))
    c_out = int((A and B)
                or (c_in and A and (not B))
                or (c_in and B and (not A)))

    return s_out, c_out


# Half Adder
def HA(A, B):
    s_out = int((A and (not B)) or (B and (not A)))
    c_out = int(A and B)
    return s_out, c_out


def dadda_fun(vertical_table, goal, level, printout, test):
    empty_col = []
    if not (vertical_table[0] == empty_col):
        vertical_table.insert(0, empty_col)

    for i in reversed(range(len(vertical_table))):
        col = vertical_table[i]
        next_col = vertical_table[i - 1]
        if len(col) > goal:
            diff = len(col) - goal
            column = len(vertical_table) - i - 1
            next_column = column + 1
            if diff == 4:
                if test:
                    # data
                    c_in_1 = int(col[0])
                    A_FA_1 = int(col[1])
                    B_FA_1 = int(col[2])
                    c_in_2 = int(col[3])
                    A_FA_2 = int(col[4])
                    B_FA_2 = int(col[5])

                    # operation: FA + FA
                    s_FA_1, c_FA_1 = FA(A_FA_1, B_FA_1, c_in_1)
                    s_FA_2, c_FA_2 = FA(A_FA_2, B_FA_2, c_in_2)

                    # remove used data from list (binary)
                    col.remove(c_in_1)
                    col.remove(A_FA_1)
                    col.remove(B_FA_1)
                    col.remove(c_in_2)
                    col.remove(A_FA_2)
                    col.remove(B_FA_2)

                    # add computed result to list
                    col.append(s_FA_1)
                    col.append(s_FA_2)
                    next_col.append(c_FA_1)
                    next_col.append(c_FA_2)

                else:

                    # data gen (label)
                    w0 = col[0]
                    w1 = col[1]
                    w2 = col[2]
                    w3 = col[3]
                    w4 = col[4]
                    w5 = col[5]

                    # result (label)
                    s1 = 's1[' + str(level) + '][' + str(column) + ']'
                    c1 = 'c1[' + str(level) + '][' + str(next_column) + ']'
                    s2 = 's2[' + str(level) + '][' + str(column) + ']'
                    c2 = 'c2[' + str(level) + '][' + str(next_column) + ']'

                    # portmap
                    FA_gen(w0, w1, w2, s1, c1, '1_' + str(level), str(column), printout)
                    FA_gen(w3, w4, w5, s2, c2, '2_' + str(level), str(column), printout)

                    # remove gen data (label)
                    col.remove(w0)
                    col.remove(w1)
                    col.remove(w2)
                    col.remove(w3)
                    col.remove(w4)
                    col.remove(w5)

                    # add gen result (label)
                    col.append(s1)
                    col.append(s2)
                    next_col.append(c1)
                    next_col.append(c2)

            if diff == 3:
                if test:
                    # data
                    c_in = int(col[0])
                    A_FA = int(col[1])
                    B_FA = int(col[2])
                    A_HA = int(col[3])
                    B_HA = int(col[4])

                    # operation: FA + HA
                    s_FA, c_FA = FA(A_FA, B_FA, c_in)
                    s_HA, c_HA = HA(A_HA, B_HA)

                    # remove used data from list
                    col.remove(c_in)
                    col.remove(A_FA)
                    col.remove(B_FA)
                    col.remove(A_HA)
                    col.remove(B_HA)

                    # add computed result to list
                    col.append(s_FA)
                    next_col.append(c_FA)
                    col.append(s_HA)
                    next_col.append(c_HA)

                else:

                    # data gen (label)
                    w0 = col[0]
                    w1 = col[1]
                    w2 = col[2]
                    w3 = col[3]
                    w4 = col[4]

                    # result (label)
                    s1 = 's1[' + str(level) + '][' + str(column) + ']'
                    c1 = 'c1[' + str(level) + '][' + str(next_column) + ']'
                    s2 = 's2[' + str(level) + '][' + str(column) + ']'
                    c2 = 'c2[' + str(level) + '][' + str(next_column) + ']'

                    # portmap
                    FA_gen(w0, w1, w2, s1, c1, str(level), str(column), printout)
                    HA_gen(w3, w4, s2, c2, str(level), str(column), printout)

                    # remove gen data (label)
                    col.remove(w0)
                    col.remove(w1)
                    col.remove(w2)
                    col.remove(w3)
                    col.remove(w4)

                    # add gen result (label)
                    col.append(s1)
                    col.append(s2)
                    next_col.append(c1)
                    next_col.append(c2)

            elif diff == 2:
                if test:
                    # data
                    c_in = int(col[0])
                    A_FA = int(col[1])
                    B_FA = int(col[2])

                    # operation: FA
                    s_FA, c_FA = FA(A_FA, B_FA, c_in)

                    # remove used data from list
                    col.remove(c_in)
                    col.remove(A_FA)
                    col.remove(B_FA)

                    # add computed result to list
                    col.append(s_FA)
                    next_col.append(c_FA)
                else:

                    # gen data (label)
                    w0 = col[0]
                    w1 = col[1]
                    w2 = col[2]

                    # result (label)
                    s1 = 's1[' + str(level) + '][' + str(column) + ']'
                    c1 = 'c1[' + str(level) + '][' + str(next_column) + ']'

                    # portmap
                    FA_gen(w0, w1, w2, s1, c1, str(level), str(column), printout)

                    # remove gen data (label)
                    col.remove(w0)
                    col.remove(w1)
                    col.remove(w2)

                    # add gen result (label)
                    col.append(s1)
                    next_col.append(c1)

            elif diff == 1:
                if test:

                    # data
                    A_HA = col[0]
                    B_HA = col[1]

                    # operation: HA
                    s_HA, c_HA = HA(A_HA, B_HA)

                    # remove used data from list
                    col.remove(A_HA)
                    col.remove(B_HA)

                    # add computed result to list
                    col.append(s_HA)
                    next_col.append(c_HA)

                else:

                    # gen data (label)
                    w0 = col[0]
                    w1 = col[1]

                    # result (label)
                    s1 = 's1[' + str(level) + '][' + str(column) + ']'
                    c1 = 'c1[' + str(level) + '][' + str(next_column) + ']'

                    # portmap
                    HA_gen(w0, w1, s1, c1, str(level), str(column), printout)

                    # remove gen data (label)
                    col.remove(w0)
                    col.remove(w1)

                    # add gen result (label)
                    col.append(s1)
                    next_col.append(c1)

                # print("Cin =", c_in, "A =", A, "B =", A, "\nS =", s, "C =", c)

    if printout and test:
        for i in range(goal):
            for col in vertical_table:
                if i < len(col):
                    if col[i] == 1:
                        print('1', end='')
                    else:
                        print('0', end='')
                else:
                    print(' ', end='')
            print()

    if printout and not test:
        for i in range(goal):
            for col in vertical_table:
                if i < len(col):
                    print(col[i], ' ', end='')
                else:
                    print('            ', end='')
            print()
        print()

    return vertical_table


# Binary to decimal function
def dec_to_bin(dec_num, length):
    return str(format(dec_num, f'0{length}b'))


def pm_gen(printout, Npp, Nbit):

    # Partial products generic
    pp_gen = [[0] * Nbit for _ in range(Npp)]
    # Signs generic
    signs_gen = ['signs[5]', 'signs[4]', 'signs[3]', 'signs[2]', 'signs[1]', 'signs[0]']

    # partial product generic assignment (label)
    for pp in range(Npp):
        for pbit in range(Nbit):
            if pbit == 0:
                pp_gen[pp][pbit] = '  pp' + str(pp + 1) + '[' + str(Nbit - pbit - 1) + ']'
            else:
                pp_gen[pp][pbit] = '   pp' + str(pp + 1) + '[' + str(Nbit - pbit - 1) + ']'

    if printout:
        print("PARTIAL PRODUCTS:")
        print()
        for row in pp_gen:
            print(row)
        print()

    # partial product generic sign extension
    for pp in range(Npp):
        if pp == 0:
            pp_gen[0] = ['~' + signs_gen[-1]] + [' ' + signs_gen[-1]] + [' ' + signs_gen[-1]] + pp_gen[0]
        else:
            pp_gen[pp] = ["     1'b1"] + ['~' + signs_gen[Npp - pp - 1]] + pp_gen[pp]

    if printout:
        print("EXTENDED PARTIAL PRODUCTS")
        print()
        for row in pp_gen:
            print(row)
        print()

    ##############################  TREE GENERATION, WEIGHT POSITIONS
    #
    # from
    #
    # x x x x x x x x x x x x x x x
    # - x x x x x x x x x x x x x x
    # - x x x x x x x x x x x x x x
    # - x x x x x x x x x x x x x x
    # - x x x x x x x x x x x x x x
    # - x x x x x x x x x x x x x x
    #
    # to
    #
    # - - - - - - x x x x x x x x x x x x x x x
    # - - - - - x x x x x x x x x x x x x x
    # - - - x x x x x x x x x x x x x x
    # - x x x x x x x x x x x x x x
    # x x x x x x x x x x x x x
    # x x x x x x x x x x x

    # diagonal disposition in matrix (label)
    matrix_gen = [['         '] * (2 * (Nbit)) for _ in range(Npp)]

    offset = Npp + 3

    for row in range(Npp):
        if row == 0:
            bits = Nbit + 3
        else:
            bits = Nbit + 2
        for col in range(bits):
            index = offset + col
            matrix_gen[row][index] = pp_gen[row][col]
        # if the next row is the last one or the second one, decrement offset by one
        if row == 0:
            offset -= 1
        else:
            offset -= 2

    if printout:
        print("WEIGHTED PARTIAL PRODUCTS")
        print()
        for row in matrix_gen:
            print(row)
        print()

    # Generic columns generation (label)
    vt_gen = [[Npp] for _ in range(2 * (Nbit))]
    tmp_list_gen = [0] * Npp

    for i in range(2 * (Nbit)):
        c = 0
        for row in matrix_gen:
            tmp_list_gen[c] = row[i]
            c = c + 1
        vt_gen[i] = tmp_list_gen.copy()

    for col in vt_gen:
        const_len_col = len(col)
        len_col = const_len_col
        i = 0
        while i < len_col:
            if col[i] == '         ':
                del col[i]
                len_col = len_col - 1
            else:
                i = i + 1

    for i in range(len(signs_gen)):
        vt_gen[-(i * 2) - 1].append(' ' + signs_gen[- i - 1])

    vt_gen[13].pop(6)

    if printout:
        print("DADDA TREE STARTING POINT")
        print()
        for i in range(Npp + 1):
            for col in vt_gen:
                if i < len(col):
                    print(col[i], ' ', end='')
                else:
                    print('           ', end='')
            print()
        print()

    return vt_gen

def test_mode(printout, Npp, Nbit, test):

    # Partial products
    partial_products = [[0] * Nbit for _ in range(Npp)]
    pp_dec = test[0:Npp]
    signs = [0]*Npp

    if len(pp_dec) != Npp:
        print("Error: ", Npp, "partial products are required (e.g. 1 2 3 4 5 6)")
        exit(-1)

    for i in range(Npp):
        if pp_dec[i] < 0:
            pp_dec[i] = abs(pp_dec[i])
            signs[i] = 1
        else:
            signs[i] = 0

    # partial product assignment (binary)
    for pp in range(Npp):
        partial_products[pp] = [int(digit) for digit in dec_to_bin(int(pp_dec[pp]), 11)]

    for i in range(Npp):
        if signs[i] == 1:
            for j in range(Nbit):
                partial_products[i][j] = 1 - partial_products[i][j]
    if printout:
        print("PARTIAL PRODUCTS:")
        print()
        for row in partial_products:
            print(row)
        print()

    # partial products sign extension
    for pp in range(Npp - 1):
        if pp == Npp - 2:
            partial_products[pp] = [1 - int(signs[pp])] + partial_products[pp]
        elif pp == 0:
            partial_products[pp] = [(1 - int(signs[pp]))] + [signs[pp]] + [signs[pp]] + \
                                   partial_products[pp]
        else:
            partial_products[pp] = [1] + [1 - int(signs[pp])] + partial_products[pp]

    # TREE GENERATION, WEIGHT POSITIONS

    # diagonal disposition in matrix (binary)
    matrix = [['x'] * (2 * (Nbit - 1)) for _ in range(Npp)]

    partial_products[-1].remove(partial_products[-1][0])
    offset = Npp
    for row in range(Npp):
        if row == 0:
            bits = Nbit + 3
        elif row == Npp - 1:
            bits = Nbit - 1
        elif row == Npp - 2:
            bits = Nbit + 1
        else:
            bits = Nbit + 2

        for col in range(bits):
            index = offset + col
            matrix[row][index] = int(partial_products[row][col])
        # if the next row is the last one or the second one, decrement offset by one
        if ((row + 1) == Npp - 2) or ((row + 1) == 1):
            offset -= 1
        elif (row + 1) == Npp - 1:
            offset = offset
        else:
            offset -= 2

    if printout:
        print("WEIGHTED PARTIAL PRODUCTS:")
        print()
        for row in matrix:
            for elem in row:
                print(elem, end=' ')
            print()
        print()

    # Columns generation (binary)
    vertical_table = [[Npp] for _ in range(2 * (Nbit - 1))]
    tmp_list = [0] * Npp

    for i in range(2 * (Nbit - 1)):
        c = 0
        for row in matrix:
            tmp_list[c] = row[i]
            c = c + 1
        vertical_table[i] = tmp_list.copy()

    for col in vertical_table:
        const_len_col = len(col)
        len_col = const_len_col
        i = 0
        while i < len_col:
            if col[i] == 'x':
                del col[i]
                len_col = len_col - 1
            else:
                i = i + 1

    #for i in range(len(signs)):
    #    vertical_table[-(i * 2) - 1].append(int(signs[-i - 1]))
    for i in range(len(signs)):
        vertical_table[-(i * 2) - 1].append(int(signs[i]))

    if printout:
        print("STARTING DADDA TREE:")
        print()
        for i in range(Npp + 1):
            for col in vertical_table:
                if i < len(col):
                    if col[i] == 1:
                        print('1', end='')
                    else:
                        print('0', end='')
                else:
                    print(' ', end='')
            print()

    return vertical_table

def result(vertical_table):
    print('\n\n')
    res = 0
    c_in = 0
    n = len(vertical_table)
    for i in range(n - 1):
        if not (len(vertical_table[-i - 1]) == 0):
            a = int(vertical_table[-i - 1][0])
            if len(vertical_table[-i - 1]) == 1:
                b = 0
            else:
                b = int(vertical_table[-i - 1][1])
            print(i, ')', a, '+', b, "+", c_in, "= ", end='')
            s, c_in = FA(a, b, c_in)
            print(s, '(s);', c_in, '(c_out)', end='\t')
            if i == (n - 2):
                res -= s * (2 ** i)
                print('\t-', s, "* 2^", i, "=", -(2 ** i), "res =", res)
            else:
                res += s * (2 ** i)
                print('\t', s, "* 2^", i, "=", (2 ** i), "res =", res)
        #    res += (el1 + el2) << (n - 1)

    print(res)


def main(test, printout):

    Npp = 6
    Nbit = 12

    if test:
    ############################### TEST
        vertical_table = test_mode(printout,Npp,Nbit,test)
    else:
    ############################### PORTMAP
        vt_gen = pm_gen(printout,Npp,Nbit)

    ############################## DADDA ALLOCATION ALGORITHM
    levels = [2]
    while levels[-1] < Npp:
        levels.append(int((levels[-1] * 3 / 2) // 1))
    levels.remove(levels[-1])

    ############################## GENERATION
    with open('portmap.txt', 'w') as pm:
        original_stdout = sys.stdout
        for level, goal in enumerate(reversed(levels)):
            if printout:
                print(f"\nITERATION: {level} Goal: {goal}")
            with open('portmap.txt', 'a') as pm:
                if test:
                    vertical_table = dadda_fun(vertical_table, goal, level, printout, test)
                else:
                    sys.stdout = pm
                    print(f"\n//ITERATION: {level} Goal: {goal}\n")
                    sys.stdout = original_stdout
                    vt_gen = dadda_fun(vt_gen, goal, level, printout, test)

    if test and printout:
        result(vertical_table)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate a dadda tree from 6 partial products of 11 bits')
    parser.add_argument('-t','--par', nargs=6, type=int, help='Dadda tree test: insert 6 partial products')
    parser.add_argument('-p','--print', type=bool, default=False, help='Dadda tree print: portmap or test mode [True | False]')
    args = parser.parse_args()
    main(args.par, args.print)
